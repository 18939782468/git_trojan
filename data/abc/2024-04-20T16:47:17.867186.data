environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\DELL\\AppData\\Roaming', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'DESKTOP-82HI708', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'CONDA_DEFAULT_ENV': 'fbw', 'CONDA_PREFIX': 'D:\\Anaconda3\\envs\\fbw', 'CONDA_PROMPT_MODIFIER': '(fbw) ', 'CONDA_SHLVL': '1', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\DELL', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\DELL\\Desktop', 'INCLUDE': 'd:\\VC\\atl\\include;d:\\VC\\mfc\\include;d:\\VC\\include;d:\\Program Files\\atl\\include;d:\\Program Files\\mfc\\include;d:\\Program Files\\include', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk1.8.0_291', 'LIB': 'd:\\VC\\mfc\\lib;d:\\VC\\lib;d:\\Program Files\\mfc\\lib;d:\\Program Files\\lib', 'LOCALAPPDATA': 'C:\\Users\\DELL\\AppData\\Local', 'LOGONSERVER': '\\\\DESKTOP-82HI708', 'MGLS_LICENSE_FILE': 'C:\\modeltech64_10.4\\win64\\LICENSE.TXT', 'MSDEVDIR': 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Common\\MSDev98', 'NUMBER_OF_PROCESSORS': '4', 'ONEDRIVE': 'C:\\Users\\DELL\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'D:\\Anaconda3\\envs\\fbw;D:\\Anaconda3\\envs\\fbw\\Library\\mingw-w64\\bin;D:\\Anaconda3\\envs\\fbw\\Library\\usr\\bin;D:\\Anaconda3\\envs\\fbw\\Library\\bin;D:\\Anaconda3\\envs\\fbw\\Scripts;D:\\Anaconda3\\envs\\fbw\\bin;D:\\Anaconda3\\condabin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\VMware\\VMware Workstation\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Windows\\System32\\OpenSSH;C:\\Program Files\\dotnet;C:\\Program Files (x86)\\dotnet;C:\\Program Files\\Bandizip;d:\\quartus\\quartus\\bin;C:\\Program Files (x86)\\Microsoft SQL Server\\100\\Tools\\Binn;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn;C:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn;C:\\Program Files (x86)\\Microsoft SQL Server\\100\\Tools\\Binn\\VSShell\\Common7\\IDE;C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\Common7\\IDE\\PrivateAssemblies;C:\\Program Files (x86)\\Microsoft SQL Server\\100\\DTS\\Binn;D:\\Program Files\\Java\\jdk1.8.0_291\\bin;D:\\Program Files\\MATLAB\\R2023b\\runtime\\win64;D:\\Program Files\\MATLAB\\R2023b\\bin;D:\\Program Files\\Git\\cmd;D:\\Anaconda3;D:\\Anaconda3\\Library\\mingw-w64\\bin;D:\\Anaconda3\\Library\\usr\\bin;D:\\Anaconda3\\Library\\bin;D:\\Anaconda3\\Scripts;d:\\VC\\bin;C:\\Program Files (x86)\\Microsoft Visual Studio\\Common\\Tools\\WinNT;C:\\Program Files (x86)\\Microsoft Visual Studio\\Common\\MSDev98\\Bin;C:\\Program Files (x86)\\Microsoft Visual Studio\\Common\\Tools;d:\\Program Files\\bin;C:\\Users\\DELL\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\DELL\\.dotnet\\tools;C:\\modeltech64_10.4\\win64;C:\\MentorGraphics\\win64;.;D:\\Program Files\\PyCharm Community Edition 2023.2.1\\bin;.;D:\\SocketeQ\\windowsandroid_root\\system\\bin;D:\\SocketeQ\\windowsandroid_root\\system\\lib;D:\\Anaconda3\\Library\\Bin', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 142 Stepping 9, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '8e09', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '(fbw) $P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM COMMUNITY EDITION': 'D:\\Program Files\\PyCharm Community Edition 2023.2.1\\bin;', 'PYCHARM_HOSTED': '1', 'PYTHONIOENCODING': 'UTF-8', 'PYTHONPATH': 'D:\\py-projects\\git-trojan', 'PYTHONUNBUFFERED': '1', 'QUARTUS_ROOTDIR': 'd:\\quartus\\quartus', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\DELL\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\DELL\\AppData\\Local\\Temp', 'USERDOMAIN': 'DESKTOP-82HI708', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-82HI708', 'USERNAME': 'DELL', 'USERPROFILE': 'C:\\Users\\DELL', 'VBOX_MSI_INSTALL_PATH': 'D:\\Program Files\\Oracle\\VirtualBox\\', 'WINDIR': 'C:\\Windows', 'WINDOWSANDROID_ROOT': 'D:\\SocketeQ\\windowsandroid_root'})